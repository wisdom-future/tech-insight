# .github/workflows/generate-project-structure.yml
name: 📁 Generate Complete Project Structure

on:
  workflow_dispatch:
    inputs:
      include_sample_data:
        description: 'Include Sample Data'
        required: true
        default: true
        type: boolean

jobs:
  generate-structure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Project Files
        run: |
          # 创建目录结构
          mkdir -p {src/{components/{common,charts,layout},views/System,router,store,utils,assets/{images,styles}},public,scripts,data/{overview,collection,analysis,action,system,reports},.github/workflows}
          
          # 生成package.json
          cat > package.json << 'EOF'
          {
            "name": "tech-insight",
            "version": "1.0.0",
            "description": "ICT技术情报决策引擎",
            "type": "module",
            "scripts": {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview",
              "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs --fix",
              "format": "prettier --write src/",
              "data:fetch": "node scripts/fetch-data.js",
              "data:validate": "node scripts/data-quality-check.js"
            },
            "dependencies": {
              "vue": "^3.4.0",
              "vue-router": "^4.2.5",
              "pinia": "^2.1.7",
              "axios": "^1.6.0",
              "dayjs": "^1.11.10",
              "echarts": "^5.4.3",
              "vue-echarts": "^6.6.1",
              "element-plus": "^2.4.4",
              "@element-plus/icons-vue": "^2.3.1",
              "lodash-es": "^4.17.21"
            },
            "devDependencies": {
              "@vitejs/plugin-vue": "^4.5.2",
              "vite": "^5.0.8",
              "tailwindcss": "^3.4.0",
              "autoprefixer": "^10.4.16",
              "postcss": "^8.4.32",
              "eslint": "^8.56.0",
              "eslint-plugin-vue": "^9.19.2",
              "prettier": "^3.1.1",
              "googleapis": "^128.0.0",
              "imagemin": "^8.0.1",
              "imagemin-mozjpeg": "^10.0.0",
              "imagemin-pngquant": "^9.0.2"
            }
          }
          EOF

          # 生成vite.config.js
          cat > vite.config.js << 'EOF'
          import { defineConfig } from 'vite'
          import vue from '@vitejs/plugin-vue'
          import { resolve } from 'path'

          export default defineConfig({
            plugins: [vue()],
            base: '/tech-insight/',
            resolve: {
              alias: {
                '@': resolve(__dirname, 'src')
              }
            },
            build: {
              outDir: 'dist',
              assetsDir: 'assets',
              rollupOptions: {
                output: {
                  manualChunks: {
                    vendor: ['vue', 'vue-router', 'pinia'],
                    charts: ['echarts', 'vue-echarts'],
                    ui: ['element-plus', '@element-plus/icons-vue']
                  }
                }
              }
            },
            server: {
              port: 3000,
              host: true
            }
          })
          EOF

          # 生成tailwind.config.js
          cat > tailwind.config.js << 'EOF'
          module.exports = {
            content: [
              "./index.html",
              "./src/**/*.{vue,js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {
                colors: {
                  primary: {
                    50: '#eff6ff',
                    500: '#3b82f6',
                    600: '#2563eb',
                    700: '#1d4ed8',
                  },
                  success: {
                    50: '#f0fdf4',
                    500: '#22c55e',
                    600: '#16a34a',
                  },
                  warning: {
                    50: '#fffbeb',
                    500: '#f59e0b',
                    600: '#d97706',
                  },
                  danger: {
                    50: '#fef2f2',
                    500: '#ef4444',
                    600: '#dc2626',
                  }
                }
              }
            },
            plugins: []
          }
          EOF

          # 生成index.html
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
            <meta charset="UTF-8" />
            <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>ICT技术情报决策引擎</title>
            <meta name="description" content="基于AI的技术情报收集、分析和决策支持系统" />
          </head>
          <body>
            <div id="app"></div>
            <script type="module" src="/src/main.js"></script>
          </body>
          </html>
          EOF

      - name: Generate Vue Components
        run: |
          # 生成主入口文件
          cat > src/main.js << 'EOF'
          import { createApp } from 'vue'
          import { createPinia } from 'pinia'
          import ElementPlus from 'element-plus'
          import 'element-plus/dist/index.css'
          import * as ElementPlusIconsVue from '@element-plus/icons-vue'
          import App from './App.vue'
          import router from './router'
          import './assets/styles/main.css'

          const app = createApp(App)
          const pinia = createPinia()

          // 注册ElementPlus图标
          for (const [key, component] of Object.entries(ElementPlusIconsVue)) {
            app.component(key, component)
          }

          app.use(pinia)
          app.use(router)
          app.use(ElementPlus)
          app.mount('#app')
          EOF

          # 生成App.vue
          cat > src/App.vue << 'EOF'
          <template>
            <div id="app" class="min-h-screen bg-gray-50">
              <Header />
              <div class="flex">
                <Sidebar />
                <main class="flex-1 p-6">
                  <router-view />
                </main>
              </div>
              <Footer />
            </div>
          </template>

          <script setup>
          import Header from '@/components/layout/Header.vue'
          import Sidebar from '@/components/layout/Sidebar.vue'
          import Footer from '@/components/layout/Footer.vue'
          </script>
          EOF

          # 生成路由配置
          cat > src/router/index.js << 'EOF'
          import { createRouter, createWebHistory } from 'vue-router'
          import Overview from '@/views/Overview.vue'
          import Collection from '@/views/Collection.vue'
          import Analysis from '@/views/Analysis.vue'
          import Action from '@/views/Action.vue'
          import Reports from '@/views/Reports.vue'

          const routes = [
            {
              path: '/',
              name: 'Overview',
              component: Overview,
              meta: { title: '概览总览' }
            },
            {
              path: '/collection',
              name: 'Collection',
              component: Collection,
              meta: { title: '数据采集' }
            },
            {
              path: '/analysis',
              name: 'Analysis',
              component: Analysis,
              meta: { title: '情报分析' }
            },
            {
              path: '/action',
              name: 'Action',
              component: Action,
              meta: { title: '行动建议' }
            },
            {
              path: '/reports',
              name: 'Reports',
              component: Reports,
              meta: { title: '报告中心' }
            }
          ]

          const router = createRouter({
            history: createWebHistory('/tech-insight/'),
            routes
          })

          export default router
          EOF

      - name: Generate Core Scripts
        run: |
          # 生成数据获取脚本
          cat > scripts/fetch-data.js << 'EOF'
          import { writeFileSync, mkdirSync } from 'fs'
          import { dirname } from 'path'
          import axios from 'axios'

          // Google Sheets API配置
          const SHEETS_CONFIG = {
            config: process.env.GOOGLE_SHEETS_CONFIG_ID,
            rawdata: process.env.GOOGLE_SHEETS_RAWDATA_ID,
            intelligence: process.env.GOOGLE_SHEETS_INTELLIGENCE_ID,
            operations: process.env.GOOGLE_SHEETS_OPERATIONS_ID
          }

          // 数据获取函数
          async function fetchSheetData(sheetId, range) {
            try {
              const url = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:json&range=${range}`
              const response = await axios.get(url)
              const jsonData = response.data.substring(47).slice(0, -2)
              return JSON.parse(jsonData)
            } catch (error) {
              console.error(`Error fetching data from sheet ${sheetId}:`, error)
              return null
            }
          }

          // 生成静态数据文件
          async function generateStaticData() {
            console.log('🔄 开始获取Google Sheets数据...')
            
            // Collection页面数据
            const techDataStatus = await fetchSheetData(SHEETS_CONFIG.rawdata, 'Raw_Academic_Papers!A1:Z1000')
            const benchmarkStatus = await fetchSheetData(SHEETS_CONFIG.rawdata, 'Raw_Industry_Dynamics!A1:Z1000')
            
            // Overview页面数据
            const intelligenceData = await fetchSheetData(SHEETS_CONFIG.intelligence, 'Tech_Intelligence_Master!A1:Z1000')
            
            // 确保目录存在
            const dataDir = 'data'
            mkdirSync(`${dataDir}/collection`, { recursive: true })
            mkdirSync(`${dataDir}/overview`, { recursive: true })
            mkdirSync(`${dataDir}/analysis`, { recursive: true })
            mkdirSync(`${dataDir}/action`, { recursive: true })
            mkdirSync(`${dataDir}/system`, { recursive: true })
            mkdirSync(`${dataDir}/reports`, { recursive: true })

            // 写入数据文件
            if (techDataStatus) {
              writeFileSync(`${dataDir}/collection/tech-data-status.json`, JSON.stringify({
                lastUpdated: new Date().toISOString(),
                data: techDataStatus
              }, null, 2))
            }

            if (benchmarkStatus) {
              writeFileSync(`${dataDir}/collection/benchmark-status.json`, JSON.stringify({
                lastUpdated: new Date().toISOString(),
                data: benchmarkStatus
              }, null, 2))
            }

            if (intelligenceData) {
              writeFileSync(`${dataDir}/overview/kpi-metrics.json`, JSON.stringify({
                lastUpdated: new Date().toISOString(),
                data: intelligenceData
              }, null, 2))
            }

            console.log('✅ 数据获取完成！')
          }

          generateStaticData().catch(console.error)
          EOF

          # 生成数据库设置脚本
          cat > scripts/setup-database.js << 'EOF'
          import { google } from 'googleapis'

          // Google Sheets API认证
          const auth = new google.auth.GoogleAuth({
            credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY),
            scopes: ['https://www.googleapis.com/auth/spreadsheets']
          })

          const sheets = google.sheets({ version: 'v4', auth })

          // 创建数据库表结构
          async function createDatabaseStructure() {
            console.log('🏗️ 开始创建Google Sheets数据库结构...')
            
            // 这里会根据你的数据库设计创建相应的表结构
            // 由于篇幅限制，这里只展示框架
            
            console.log('✅ 数据库结构创建完成！')
          }

          createDatabaseStructure().catch(console.error)
          EOF

      - name: Generate Sample Data
        if: inputs.include_sample_data
        run: |
          # 生成示例数据
          cat > data/collection/tech-data-status.json << 'EOF'
          {
            "lastUpdated": "2025-06-23T10:00:00Z",
            "techData": {
              "academicPapers": {
                "title": "学术论文",
                "icon": "📚",
                "status": "active",
                "todayCount": 45,
                "totalCount": 1250,
                "successRate": 98.5,
                "avgQualityScore": 8.2,
                "topKeywords": ["AI", "5G", "量子计算"],
                "trendData": [30, 35, 42, 38, 45],
                "lastUpdate": "2025-06-23T09:30:00Z"
              },
              "patentData": {
                "title": "专利数据",
                "icon": "🔬",
                "status": "active",
                "todayCount": 78,
                "totalCount": 3420,
                "successRate": 96.8,
                "avgQualityScore": 7.9,
                "topFields": ["通信技术", "人工智能", "半导体"],
                "trendData": [65, 70, 75, 72, 78],
                "lastUpdate": "2025-06-23T09:30:00Z"
              }
            }
          }
          EOF

      - name: Commit Generated Files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "🚀 Generate complete Tech Insight project structure" || exit 0
          git push
