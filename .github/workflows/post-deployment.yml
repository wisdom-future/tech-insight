# .github/workflows/fix-deployment.yml
name: 🔧 Fix Tech Insight Deployment

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  fix-and-deploy:
    runs-on: ubuntu-latest
    name: 🔧 Fix Dependencies and Deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create Complete Project Structure
        run: |
          echo "📁 Creating complete project structure..."
          
          # 创建所有必需的目录
          mkdir -p {src/{components/{common,charts,layout},views/System,router,store,utils,assets/{images,styles}},public,scripts,data/{overview,collection,analysis,action,system,reports}}
          
          # 生成 package.json
          cat > package.json << 'EOF'
          {
            "name": "tech-insight",
            "version": "1.0.0",
            "description": "ICT技术情报决策引擎",
            "type": "module",
            "scripts": {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview",
              "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs --fix",
              "format": "prettier --write src/",
              "data:fetch": "node scripts/fetch-data.js"
            },
            "dependencies": {
              "vue": "^3.4.0",
              "vue-router": "^4.2.5",
              "pinia": "^2.1.7",
              "axios": "^1.6.0",
              "dayjs": "^1.11.10",
              "echarts": "^5.4.3",
              "vue-echarts": "^6.6.1",
              "element-plus": "^2.4.4",
              "@element-plus/icons-vue": "^2.3.1",
              "lodash-es": "^4.17.21"
            },
            "devDependencies": {
              "@vitejs/plugin-vue": "^4.5.2",
              "vite": "^5.0.8",
              "tailwindcss": "^3.4.0",
              "autoprefixer": "^10.4.16",
              "postcss": "^8.4.32",
              "eslint": "^8.56.0",
              "eslint-plugin-vue": "^9.19.2",
              "prettier": "^3.1.1"
            }
          }
          EOF

      - name: Generate Configuration Files
        run: |
          # vite.config.js
          cat > vite.config.js << 'EOF'
          import { defineConfig } from 'vite'
          import vue from '@vitejs/plugin-vue'
          import { resolve } from 'path'

          export default defineConfig({
            plugins: [vue()],
            base: '/tech-insight/',
            resolve: {
              alias: {
                '@': resolve(__dirname, 'src')
              }
            },
            build: {
              outDir: 'dist',
              assetsDir: 'assets',
              rollupOptions: {
                output: {
                  manualChunks: {
                    vendor: ['vue', 'vue-router', 'pinia'],
                    charts: ['echarts', 'vue-echarts'],
                    ui: ['element-plus', '@element-plus/icons-vue']
                  }
                }
              }
            },
            server: {
              port: 3000,
              host: true
            }
          })
          EOF

          # tailwind.config.js
          cat > tailwind.config.js << 'EOF'
          module.exports = {
            content: [
              "./index.html",
              "./src/**/*.{vue,js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {
                colors: {
                  primary: {
                    50: '#eff6ff',
                    500: '#3b82f6',
                    600: '#2563eb',
                    700: '#1d4ed8',
                  },
                  success: {
                    50: '#f0fdf4',
                    500: '#22c55e',
                    600: '#16a34a',
                  },
                  warning: {
                    50: '#fffbeb',
                    500: '#f59e0b',
                    600: '#d97706',
                  },
                  danger: {
                    50: '#fef2f2',
                    500: '#ef4444',
                    600: '#dc2626',
                  }
                }
              }
            },
            plugins: []
          }
          EOF

          # postcss.config.js
          cat > postcss.config.js << 'EOF'
          module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOF

      - name: Generate HTML Entry
        run: |
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
            <meta charset="UTF-8" />
            <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>ICT技术情报决策引擎</title>
            <meta name="description" content="基于AI的技术情报收集、分析和决策支持系统" />
          </head>
          <body>
            <div id="app"></div>
            <script type="module" src="/src/main.js"></script>
          </body>
          </html>
          EOF

          # 生成favicon
          echo "📎 Creating favicon..."
          mkdir -p public
          # 创建简单的SVG favicon
          cat > public/favicon.ico << 'EOF'
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
            <circle cx="16" cy="16" r="14" fill="#3b82f6"/>
            <text x="16" y="22" text-anchor="middle" fill="white" font-size="18" font-weight="bold">T</text>
          </svg>
          EOF

      - name: Generate Vue Application
        run: |
          # src/main.js
          cat > src/main.js << 'EOF'
          import { createApp } from 'vue'
          import { createPinia } from 'pinia'
          import ElementPlus from 'element-plus'
          import 'element-plus/dist/index.css'
          import * as ElementPlusIconsVue from '@element-plus/icons-vue'
          import App from './App.vue'
          import router from './router'
          import './assets/styles/main.css'

          const app = createApp(App)
          const pinia = createPinia()

          // 注册ElementPlus图标
          for (const [key, component] of Object.entries(ElementPlusIconsVue)) {
            app.component(key, component)
          }

          app.use(pinia)
          app.use(router)
          app.use(ElementPlus)
          app.mount('#app')
          EOF

          # src/App.vue
          cat > src/App.vue << 'EOF'
          <template>
            <div id="app" class="min-h-screen bg-gray-50">
              <Header />
              <div class="flex">
                <Sidebar />
                <main class="flex-1 p-6">
                  <router-view />
                </main>
              </div>
              <Footer />
            </div>
          </template>

          <script setup>
          import Header from '@/components/layout/Header.vue'
          import Sidebar from '@/components/layout/Sidebar.vue'
          import Footer from '@/components/layout/Footer.vue'
          </script>
          EOF

          # 生成样式文件
          cat > src/assets/styles/main.css << 'EOF'
          @import 'tailwindcss/base';
          @import 'tailwindcss/components';
          @import 'tailwindcss/utilities';

          /* 自定义样式 */
          .tech-card {
            @apply bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow;
          }

          .status-active {
            @apply text-green-600 bg-green-100 px-2 py-1 rounded-full text-sm;
          }

          .trend-up {
            @apply text-green-600;
          }

          .trend-down {
            @apply text-red-600;
          }
          EOF

      - name: Generate Router Configuration
        run: |
          cat > src/router/index.js << 'EOF'
          import { createRouter, createWebHistory } from 'vue-router'
          import Overview from '@/views/Overview.vue'
          import Collection from '@/views/Collection.vue'
          import Analysis from '@/views/Analysis.vue'
          import Action from '@/views/Action.vue'
          import Reports from '@/views/Reports.vue'

          const routes = [
            {
              path: '/',
              name: 'Overview',
              component: Overview,
              meta: { title: '概览总览' }
            },
            {
              path: '/collection',
              name: 'Collection',
              component: Collection,
              meta: { title: '数据采集' }
            },
            {
              path: '/analysis',
              name: 'Analysis',
              component: Analysis,
              meta: { title: '情报分析' }
            },
            {
              path: '/action',
              name: 'Action',
              component: Action,
              meta: { title: '行动建议' }
            },
            {
              path: '/reports',
              name: 'Reports',
              component: Reports,
              meta: { title: '报告中心' }
            }
          ]

          const router = createRouter({
            history: createWebHistory('/tech-insight/'),
            routes
          })

          router.beforeEach((to, from, next) => {
            document.title = `${to.meta.title} - ICT技术情报决策引擎`
            next()
          })

          export default router
          EOF

      - name: Generate Layout Components
        run: |
          # Header组件
          cat > src/components/layout/Header.vue << 'EOF'
          <template>
            <header class="bg-white shadow-sm border-b">
              <div class="px-6 py-4">
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-4">
                    <h1 class="text-2xl font-bold text-gray-900">
                      🧠 ICT技术情报决策引擎
                    </h1>
                    <span class="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                      v1.0.0
                    </span>
                  </div>
                  <div class="flex items-center space-x-4">
                    <el-badge :value="alertCount" class="item">
                      <el-button :icon="Bell" circle />
                    </el-badge>
                    <span class="text-sm text-gray-600">
                      最后更新: {{ lastUpdate }}
                    </span>
                  </div>
                </div>
              </div>
            </header>
          </template>

          <script setup>
          import { ref, onMounted } from 'vue'
          import { Bell } from '@element-plus/icons-vue'
          import dayjs from 'dayjs'

          const alertCount = ref(3)
          const lastUpdate = ref('')

          onMounted(() => {
            lastUpdate.value = dayjs().format('YYYY-MM-DD HH:mm')
          })
          </script>
          EOF

          # Sidebar组件
          cat > src/components/layout/Sidebar.vue << 'EOF'
          <template>
            <aside class="w-64 bg-white shadow-sm h-screen sticky top-0">
              <nav class="p-4">
                <el-menu
                  :default-active="$route.path"
                  class="border-0"
                  router
                >
                  <el-menu-item index="/">
                    <el-icon><DataBoard /></el-icon>
                    <span>概览总览</span>
                  </el-menu-item>
                  <el-menu-item index="/collection">
                    <el-icon><Collection /></el-icon>
                    <span>数据采集</span>
                  </el-menu-item>
                  <el-menu-item index="/analysis">
                    <el-icon><DataAnalysis /></el-icon>
                    <span>情报分析</span>
                  </el-menu-item>
                  <el-menu-item index="/action">
                    <el-icon><Lightning /></el-icon>
                    <span>行动建议</span>
                  </el-menu-item>
                  <el-menu-item index="/reports">
                    <el-icon><Document /></el-icon>
                    <span>报告中心</span>
                  </el-menu-item>
                </el-menu>
              </nav>
            </aside>
          </template>

          <script setup>
          import { 
            DataBoard, 
            Collection, 
            DataAnalysis, 
            Lightning, 
            Document 
          } from '@element-plus/icons-vue'
          </script>
          EOF

          # Footer组件
          cat > src/components/layout/Footer.vue << 'EOF'
          <template>
            <footer class="bg-white border-t mt-8">
              <div class="px-6 py-4">
                <div class="flex items-center justify-between text-sm text-gray-600">
                  <div>
                    © 2025 ICT技术情报决策引擎. Powered by Make.com + Google Sheets + GitHub Pages
                  </div>
                  <div class="flex items-center space-x-4">
                    <span>系统状态: <span class="text-green-600">● 正常</span></span>
                    <span>数据更新: 每日 08:00</span>
                  </div>
                </div>
              </div>
            </footer>
          </template>
          EOF

      - name: Generate View Components
        run: |
          # Overview页面
          cat > src/views/Overview.vue << 'EOF'
          <template>
            <div class="space-y-6">
              <div class="flex items-center justify-between">
                <h2 class="text-3xl font-bold text-gray-900">概览总览</h2>
                <el-button type="primary" @click="refreshData">
                  <el-icon><Refresh /></el-icon>
                  刷新数据
                </el-button>
              </div>

              <!-- KPI指标卡片 -->
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div v-for="kpi in kpiMetrics" :key="kpi.title" class="tech-card">
                  <div class="flex items-center justify-between">
                    <div>
                      <p class="text-sm text-gray-600">{{ kpi.title }}</p>
                      <p class="text-2xl font-bold text-gray-900">{{ kpi.value }}</p>
                      <p class="text-sm" :class="kpi.trend > 0 ? 'trend-up' : 'trend-down'">
                        {{ kpi.trend > 0 ? '↗' : '↘' }} {{ Math.abs(kpi.trend) }}%
                      </p>
                    </div>
                    <div class="text-3xl">{{ kpi.icon }}</div>
                  </div>
                </div>
              </div>

              <!-- 最新情报 -->
              <div class="tech-card">
                <h3 class="text-xl font-semibold mb-4">🎯 最新技术情报</h3>
                <div class="space-y-4">
                  <div v-for="intel in latestIntelligence" :key="intel.id" 
                       class="border-l-4 border-blue-500 pl-4 py-2">
                    <h4 class="font-medium text-gray-900">{{ intel.title }}</h4>
                    <p class="text-sm text-gray-600">{{ intel.summary }}</p>
                    <div class="flex items-center space-x-4 mt-2 text-xs text-gray-500">
                      <span>信号强度: {{ intel.signalStrength }}/10</span>
                      <span>商业价值: {{ intel.commercialValue }}/10</span>
                      <span>{{ intel.createdAt }}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </template>

          <script setup>
          import { ref, onMounted } from 'vue'
          import { Refresh } from '@element-plus/icons-vue'
          import { ElMessage } from 'element-plus'

          const kpiMetrics = ref([
            { title: '今日新增情报', value: '12', trend: 8.5, icon: '🎯' },
            { title: '待分析信号', value: '28', trend: -2.1, icon: '⚡' },
            { title: '高价值机会', value: '5', trend: 15.3, icon: '💎' },
            { title: '紧急预警', value: '2', trend: -12.5, icon: '🚨' }
          ])

          const latestIntelligence = ref([
            {
              id: 1,
              title: '量子计算在金融风控领域的突破性应用',
              summary: 'IBM发布新型量子算法，可将风险计算速度提升1000倍...',
              signalStrength: 9.2,
              commercialValue: 8.8,
              createdAt: '2小时前'
            },
            {
              id: 2,
              title: '6G通信标准制定进入关键阶段',
              summary: '3GPP组织宣布6G标准化时间表，预计2028年商用...',
              signalStrength: 8.7,
              commercialValue: 9.1,
              createdAt: '4小时前'
            }
          ])

          const refreshData = () => {
            ElMessage.success('数据刷新成功！')
          }

          onMounted(() => {
            // 页面初始化逻辑
          })
          </script>
          EOF

          # Collection页面
          cat > src/views/Collection.vue << 'EOF'
          <template>
            <div class="space-y-6">
              <div class="flex items-center justify-between">
                <h2 class="text-3xl font-bold text-gray-900">数据采集监控</h2>
                <div class="flex space-x-2">
                  <el-button @click="toggleAutoRefresh">
                    {{ autoRefresh ? '停止自动刷新' : '开启自动刷新' }}
                  </el-button>
                  <el-button type="primary" @click="refreshData">
                    <el-icon><Refresh /></el-icon>
                    立即刷新
                  </el-button>
                </div>
              </div>

              <!-- 技术数据监控区域 -->
              <div class="tech-card">
                <h3 class="text-xl font-semibold mb-4">📊 技术数据监控</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <div v-for="data in techDataStatus" :key="data.title" 
                       class="border rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div class="flex items-center justify-between mb-2">
                      <span class="text-2xl">{{ data.icon }}</span>
                      <span class="status-active">{{ data.status }}</span>
                    </div>
                    <h4 class="font-medium text-gray-900">{{ data.title }}</h4>
                    <div class="mt-2 space-y-1 text-sm">
                      <div class="flex justify-between">
                        <span class="text-gray-600">今日采集:</span>
                        <span class="font-medium">{{ data.todayCount }}</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-gray-600">成功率:</span>
                        <span class="font-medium text-green-600">{{ data.successRate }}%</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-gray-600">质量评分:</span>
                        <span class="font-medium">{{ data.avgQualityScore }}/10</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- 业界标杆监控区域 -->
              <div class="tech-card">
                <h3 class="text-xl font-semibold mb-4">🏭 业界标杆监控</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <div v-for="benchmark in benchmarkStatus" :key="benchmark.title" 
                       class="border rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div class="flex items-center justify-between mb-2">
                      <span class="text-2xl">{{ benchmark.icon }}</span>
                      <span class="status-active">{{ benchmark.status }}</span>
                    </div>
                    <h4 class="font-medium text-gray-900">{{ benchmark.title }}</h4>
                    <div class="mt-2 space-y-1 text-sm">
                      <div class="flex justify-between">
                        <span class="text-gray-600">今日事件:</span>
                        <span class="font-medium">{{ benchmark.todayCount }}</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-gray-600">影响评分:</span>
                        <span class="font-medium text-orange-600">{{ benchmark.avgImpactScore }}/10</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </template>

          <script setup>
          import { ref, onMounted, onUnmounted } from 'vue'
          import { Refresh } from '@element-plus/icons-vue'
          import { ElMessage } from 'element-plus'

          const autoRefresh = ref(false)
          let refreshTimer = null

          const techDataStatus = ref([
            {
              title: '学术论文',
              icon: '📚',
              status: 'active',
              todayCount: 45,
              successRate: 98.5,
              avgQualityScore: 8.2
            },
            {
              title: '专利数据',
              icon: '🔬',
              status: 'active',
              todayCount: 78,
              successRate: 96.8,
              avgQualityScore: 7.9
            },
            {
              title: '开源项目',
              icon: '💻',
              status: 'active',
              todayCount: 23,
              successRate: 94.2,
              avgQualityScore: 8.5
            },
            {
              title: '技术新闻',
              icon: '📰',
              status: 'active',
              todayCount: 156,
              successRate: 99.1,
              avgQualityScore: 7.5
            }
          ])

          const benchmarkStatus = ref([
            {
              title: '标杆动态',
              icon: '🏭',
              status: 'active',
              todayCount: 32,
              avgImpactScore: 8.1
            },
            {
              title: '技术创新',
              icon: '🚀',
              status: 'active',
              todayCount: 18,
              avgImpactScore: 8.7
            },
            {
              title: '产品发布',
              icon: '📱',
              status: 'active',
              todayCount: 8,
              avgImpactScore: 7.8
            },
            {
              title: '人才流动',
              icon: '👥',
              status: 'active',
              todayCount: 12,
              avgImpactScore: 8.3
            }
          ])

          const refreshData = () => {
            ElMessage.success('数据刷新成功！')
          }

          const toggleAutoRefresh = () => {
            autoRefresh.value = !autoRefresh.value
            if (autoRefresh.value) {
              refreshTimer = setInterval(refreshData, 30000) // 30秒刷新一次
              ElMessage.info('已开启自动刷新（30秒间隔）')
            } else {
              clearInterval(refreshTimer)
              ElMessage.info('已停止自动刷新')
            }
          }

          onUnmounted(() => {
            if (refreshTimer) {
              clearInterval(refreshTimer)
            }
          })
          </script>
          EOF

          # 生成其他页面的基础结构
          for page in Analysis Action Reports; do
            cat > src/views/${page}.vue << EOF
          <template>
            <div class="space-y-6">
              <h2 class="text-3xl font-bold text-gray-900">${page}</h2>
              <div class="tech-card">
                <p class="text-gray-600">🚧 ${page}页面正在开发中...</p>
              </div>
            </div>
          </template>

          <script setup>
          // ${page}页面逻辑
          </script>
          EOF
          done

      - name: Generate Sample Data
        run: |
          # 生成示例数据文件
          cat > data/collection/tech-data-status.json << 'EOF'
          {
            "lastUpdated": "2025-06-23T10:00:00Z",
            "techData": {
              "academicPapers": {
                "title": "学术论文",
                "icon": "📚",
                "status": "active",
                "todayCount": 45,
                "totalCount": 1250,
                "successRate": 98.5,
                "avgQualityScore": 8.2,
                "topKeywords": ["AI", "5G", "量子计算"],
                "trendData": [30, 35, 42, 38, 45],
                "lastUpdate": "2025-06-23T09:30:00Z"
              }
            }
          }
          EOF

          cat > data/overview/kpi-metrics.json << 'EOF'
          {
            "lastUpdated": "2025-06-23T10:00:00Z",
            "metrics": {
              "dailyIntelligence": 12,
              "pendingSignals": 28,
              "highValueOpportunities": 5,
              "criticalAlerts": 2
            }
          }
          EOF

      - name: Install Dependencies and Generate Lock File
        run: |
          echo "📦 Installing dependencies and generating lock file..."
          npm install
          
          # 确保lock文件存在
          if [ ! -f "package-lock.json" ]; then
            echo "❌ package-lock.json not generated, creating manually..."
            npm install --package-lock-only
          fi
          
          echo "✅ Dependencies installed successfully!"
          ls -la package*.json

      - name: Build Application
        run: |
          echo "🔨 Building Vue.js application..."
          npm run build
        env:
          NODE_ENV: production

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: # 如果有自定义域名，在这里配置

      - name: Commit Generated Files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "🚀 Complete Tech Insight project setup with all dependencies" || exit 0
          git push
