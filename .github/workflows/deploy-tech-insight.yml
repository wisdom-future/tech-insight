name: 🚀 Tech Insight System - Complete Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      setup_mode:
        description: 'Setup Mode'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - frontend-only
        - data-only
  schedule:
    - cron: '0 0 * * *'

env:
  NODE_VERSION: '18'

jobs:
  # 单一任务：构建和部署
  build-and-deploy:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Deploy Tech Insight
    permissions:
      contents: write
      pages: write
      id-token: write
      actions: read
      pull-requests: write
      checks: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create Project Structure
        run: |
          echo "📁 Creating project structure..."
          
          # 创建目录结构
          mkdir -p src/{components/{common,charts,layout},views/System,router,store,utils,assets/{images,styles}}
          mkdir -p public
          mkdir -p data/{overview,collection,analysis,action,system,reports}
          
          # 生成 package.json (不包含 type: module)
          cat > package.json << 'EOF'
          {
            "name": "tech-insight",
            "version": "1.0.0",
            "description": "ICT技术情报决策引擎",
            "scripts": {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview"
            },
            "dependencies": {
              "vue": "^3.4.0",
              "vue-router": "^4.2.5",
              "pinia": "^2.1.7",
              "axios": "^1.6.0",
              "dayjs": "^1.11.10"
            },
            "devDependencies": {
              "@vitejs/plugin-vue": "^4.5.2",
              "vite": "^5.0.8",
              "tailwindcss": "^3.4.0",
              "autoprefixer": "^10.4.16",
              "postcss": "^8.4.32"
            }
          }
          EOF
          
          # 生成 vite.config.js
          cat > vite.config.js << 'EOF'
          import { defineConfig } from 'vite'
          import vue from '@vitejs/plugin-vue'
          import { resolve } from 'path'

          export default defineConfig({
            plugins: [vue()],
            base: '/tech-insight/',
            resolve: {
              alias: {
                '@': resolve(__dirname, 'src')
              }
            },
            build: {
              outDir: 'dist',
              assetsDir: 'assets',
              emptyOutDir: true
            }
          })
          EOF
          
          # 生成 postcss.config.js (CommonJS语法)
          cat > postcss.config.js << 'EOF'
          module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOF
          
          # 生成 tailwind.config.js
          cat > tailwind.config.js << 'EOF'
          module.exports = {
            content: [
              "./index.html",
              "./src/**/*.{vue,js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {
                colors: {
                  primary: {
                    50: '#eff6ff',
                    500: '#3b82f6',
                    600: '#2563eb',
                    700: '#1d4ed8',
                  }
                }
              }
            },
            plugins: []
          }
          EOF
          
          # 生成 index.html
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
            <meta charset="UTF-8" />
            <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🔧</text></svg>" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>ICT技术情报决策引擎</title>
          </head>
          <body>
            <div id="app"></div>
            <script type="module" src="/src/main.js"></script>
          </body>
          </html>
          EOF

      - name: Create Vue Application Files
        run: |
          echo "🔧 Creating Vue.js application..."
          
          # 生成 src/main.js (简化版本)
          cat > src/main.js << 'EOF'
          import { createApp } from 'vue'
          import App from './App.vue'
          import router from './router'
          import './assets/styles/main.css'

          console.log('Starting Vue application...')

          const app = createApp(App)
          app.use(router)
          app.mount('#app')

          console.log('Vue application mounted successfully')
          EOF
          
          # 生成包含环境变量的 src/utils/api.js
          cat > src/utils/api.js << 'EOF'
          import axios from 'axios'

          // 🔧 配置区域 - 将被环境变量替换
          const API_BASE_URL = 'GOOGLE_APPS_SCRIPT_URL_PLACEHOLDER'

          // 创建axios实例
          const api = axios.create({
            baseURL: API_BASE_URL,
            timeout: 15000,
            headers: {
              'Content-Type': 'application/json'
            }
          })

          // 请求拦截器
          api.interceptors.request.use(
            config => {
              console.log('API请求:', config.url, config.params)
              return config
            },
            error => {
              console.error('请求错误:', error)
              return Promise.reject(error)
            }
          )

          // 响应拦截器
          api.interceptors.response.use(
            response => {
              console.log('API响应:', response.data)
              return response
            },
            error => {
              console.error('响应错误:', error)
              return Promise.reject(error)
            }
          )

          // 📊 获取数据采集状态
          export const getCollectionData = async () => {
            try {
              const response = await api.get('', {
                params: { action: 'getCollectionData' }
              })
              return response.data
            } catch (error) {
              console.error('获取Collection数据失败:', error)
              throw error
            }
          }

          // 📈 获取概览数据
          export const getOverviewData = async () => {
            try {
              const response = await api.get('', {
                params: { action: 'getOverviewData' }
              })
              return response.data
            } catch (error) {
              console.error('获取Overview数据失败:', error)
              throw error
            }
          }

          // 🧠 获取分析数据
          export const getAnalysisData = async () => {
            try {
              const response = await api.get('', {
                params: { action: 'getAnalysisData' }
              })
              return response.data
            } catch (error) {
              console.error('获取Analysis数据失败:', error)
              throw error
            }
          }

          // 🎯 获取行动建议数据
          export const getActionData = async () => {
            try {
              const response = await api.get('', {
                params: { action: 'getActionData' }
              })
              return response.data
            } catch (error) {
              console.error('获取Action数据失败:', error)
              throw error
            }
          }

          // 📋 获取报告数据
          export const getReportsData = async () => {
            try {
              const response = await api.get('', {
                params: { action: 'getReportsData' }
              })
              return response.data
            } catch (error) {
              console.error('获取Reports数据失败:', error)
              throw error
            }
          }

          // 🔧 获取系统状态
          export const getSystemStatus = async () => {
            try {
              const response = await api.get('', {
                params: { action: 'getSystemStatus' }
              })
              return response.data
            } catch (error) {
              console.error('获取系统状态失败:', error)
              throw error
            }
          }

          export default api
          EOF
          
          # 生成 src/App.vue (简化版本)
          cat > src/App.vue << 'EOF'
          <template>
            <div id="app" class="min-h-screen bg-gray-50">
              <header class="bg-white shadow-sm border-b border-gray-200">
                <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                  <div class="flex justify-between h-16">
                    <div class="flex items-center">
                      <h1 class="text-xl font-semibold text-gray-900">ICT技术情报决策引擎</h1>
                    </div>
                  </div>
                </div>
              </header>
              
              <div class="flex">
                <aside class="w-64 bg-white shadow-sm">
                  <nav class="mt-5 px-2">
                    <router-link
                      v-for="item in navigation"
                      :key="item.name"
                      :to="item.href"
                      class="group flex items-center px-2 py-2 text-base font-medium rounded-md text-gray-600 hover:bg-gray-50"
                    >
                      <span class="mr-3">{{ item.icon }}</span>
                      {{ item.title }}
                    </router-link>
                  </nav>
                </aside>
                
                <main class="flex-1 p-6">
                  <router-view />
                </main>
              </div>
            </div>
          </template>

          <script setup>
          const navigation = [
            { name: 'Overview', title: '概览总览', href: '/', icon: '📊' },
            { name: 'Collection', title: '数据采集', href: '/collection', icon: '📥' },
            { name: 'Analysis', title: '情报分析', href: '/analysis', icon: '🧠' },
            { name: 'Action', title: '行动建议', href: '/action', icon: '🎯' },
            { name: 'Reports', title: '报告中心', href: '/reports', icon: '📋' }
          ]
          </script>
          EOF
          
          # 生成路由文件 (保持原有内容)
          cat > src/router/index.js << 'EOF'
          import { createRouter, createWebHistory } from 'vue-router'
          import Overview from '@/views/Overview.vue'
          import Collection from '@/views/Collection.vue'
          import Analysis from '@/views/Analysis.vue'
          import Action from '@/views/Action.vue'
          import Reports from '@/views/Reports.vue'

          const routes = [
            { path: '/', name: 'Overview', component: Overview, meta: { title: '概览总览' } },
            { path: '/collection', name: 'Collection', component: Collection, meta: { title: '数据采集' } },
            { path: '/analysis', name: 'Analysis', component: Analysis, meta: { title: '情报分析' } },
            { path: '/action', name: 'Action', component: Action, meta: { title: '行动建议' } },
            { path: '/reports', name: 'Reports', component: Reports, meta: { title: '报告中心' } }
          ]

          const router = createRouter({
            history: createWebHistory('/tech-insight/'),
            routes
          })

          export default router
          EOF
        env:
          GOOGLE_APPS_SCRIPT_URL: ${{ secrets.GOOGLE_APPS_SCRIPT_URL }}

      - name: Create Components and Views
        run: |
          echo "📦 Creating components and views..."
          
          # 创建布局组件
          cat > src/components/layout/Header.vue << 'EOF'
          <template>
            <header class="bg-white shadow-sm border-b border-gray-200">
              <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between h-16">
                  <div class="flex items-center">
                    <h1 class="text-xl font-semibold text-gray-900">ICT技术情报决策引擎</h1>
                  </div>
                  <div class="flex items-center space-x-4">
                    <span class="text-sm text-gray-500">{{ currentTime }}</span>
                  </div>
                </div>
              </div>
            </header>
          </template>

          <script setup>
          import { ref, onMounted, onUnmounted } from 'vue'

          const currentTime = ref('')

          let timer = null

          const updateTime = () => {
            const now = new Date()
            currentTime.value = now.toLocaleString('zh-CN')
          }

          onMounted(() => {
            updateTime()
            timer = setInterval(updateTime, 1000)
          })

          onUnmounted(() => {
            if (timer) {
              clearInterval(timer)
            }
          })
          </script>
          EOF
          
          cat > src/components/layout/Sidebar.vue << 'EOF'
          <template>
            <aside class="w-64 bg-white shadow-sm">
              <nav class="mt-5 px-2">
                <router-link
                  v-for="item in navigation"
                  :key="item.name"
                  :to="item.href"
                  class="group flex items-center px-2 py-2 text-base font-medium rounded-md"
                  :class="$route.name === item.name ? 'bg-blue-100 text-blue-700' : 'text-gray-600 hover:bg-gray-50'"
                >
                  <span class="mr-3">{{ item.icon }}</span>
                  {{ item.title }}
                </router-link>
              </nav>
            </aside>
          </template>

          <script setup>
          const navigation = [
            { name: 'Overview', title: '概览总览', href: '/', icon: '📊' },
            { name: 'Collection', title: '数据采集', href: '/collection', icon: '📥' },
            { name: 'Analysis', title: '情报分析', href: '/analysis', icon: '🧠' },
            { name: 'Action', title: '行动建议', href: '/action', icon: '🎯' },
            { name: 'Reports', title: '报告中心', href: '/reports', icon: '📋' }
          ]
          </script>
          EOF
          
          cat > src/components/layout/Footer.vue << 'EOF'
          <template>
            <footer class="bg-white border-t border-gray-200">
              <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
                <p class="text-center text-sm text-gray-500">
                  © 2025 ICT技术情报决策引擎. Powered by Vue.js & GitHub Pages.
                </p>
              </div>
            </footer>
          </template>
          EOF

          # 创建通用组件
          # 创建完整的DataCard组件
          cat > src/components/common/DataCard.vue << 'EOF'
          <template>
            <div :class="cardClasses" class="rounded-lg p-4 border">
              <div class="flex items-center justify-between mb-3">
                <div class="flex items-center">
                  <span class="text-2xl mr-2">{{ data.icon }}</span>
                  <h3 class="font-medium text-gray-900">{{ data.title }}</h3>
                </div>
                <span :class="statusClasses" class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium">
                  {{ data.status === 'loading' ? '加载中' : '活跃' }}
                </span>
              </div>
              
              <div v-if="loading" class="space-y-2">
                <div class="animate-pulse">
                  <div class="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                  <div class="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
                  <div class="h-4 bg-gray-200 rounded w-2/3"></div>
                </div>
              </div>
              
              <div v-else class="space-y-2">
                <div class="flex justify-between">
                  <span class="text-sm text-gray-600">今日采集</span>
                  <span :class="primaryTextClass" class="text-sm font-semibold">{{ data.todayCount }} 条</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-gray-600">总计</span>
                  <span class="text-sm font-semibold">{{ data.totalCount }} 条</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-gray-600">成功率</span>
                  <span class="text-sm font-semibold text-green-600">{{ data.successRate }}%</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-gray-600">{{ scoreLabel }}</span>
                  <span class="text-sm font-semibold text-orange-600">{{ scoreValue }}</span>
                </div>
              </div>
              
              <div v-if="!loading && tags.length > 0" :class="borderClass" class="mt-3 pt-3 border-t">
                <div class="text-xs text-gray-600 mb-1">{{ tagLabel }}:</div>
                <div class="flex flex-wrap gap-1">
                  <span v-for="tag in tags" :key="tag" 
                        :class="tagClasses" 
                        class="inline-flex items-center px-2 py-1 rounded text-xs">
                    {{ tag }}
                  </span>
                </div>
              </div>
            </div>
          </template>

          <script setup>
          import { computed } from 'vue'

          const props = defineProps({
            data: {
              type: Object,
              required: true
            },
            color: {
              type: String,
              default: 'blue'
            },
            loading: {
              type: Boolean,
              default: false
            }
          })

          const colorConfig = {
            blue: {
              bg: 'bg-blue-50',
              border: 'border-blue-200',
              status: 'bg-blue-100 text-blue-800',
              text: 'text-blue-600',
              tag: 'bg-blue-100 text-blue-700',
              borderClass: 'border-blue-200'
            },
            green: {
              bg: 'bg-green-50',
              border: 'border-green-200',
              status: 'bg-green-100 text-green-800',
              text: 'text-green-600',
              tag: 'bg-green-100 text-green-700',
              borderClass: 'border-green-200'
            },
            purple: {
              bg: 'bg-purple-50',
              border: 'border-purple-200',
              status: 'bg-purple-100 text-purple-800',
              text: 'text-purple-600',
              tag: 'bg-purple-100 text-purple-700',
              borderClass: 'border-purple-200'
            },
            orange: {
              bg: 'bg-orange-50',
              border: 'border-orange-200',
              status: 'bg-orange-100 text-orange-800',
              text: 'text-orange-600',
              tag: 'bg-orange-100 text-orange-700',
              borderClass: 'border-orange-200'
            },
            indigo: {
              bg: 'bg-indigo-50',
              border: 'border-indigo-200',
              status: 'bg-indigo-100 text-indigo-800',
              text: 'text-indigo-600',
              tag: 'bg-indigo-100 text-indigo-700',
              borderClass: 'border-indigo-200'
            },
            pink: {
              bg: 'bg-pink-50',
              border: 'border-pink-200',
              status: 'bg-pink-100 text-pink-800',
              text: 'text-pink-600',
              tag: 'bg-pink-100 text-pink-700',
              borderClass: 'border-pink-200'
            },
            cyan: {
              bg: 'bg-cyan-50',
              border: 'border-cyan-200',
              status: 'bg-cyan-100 text-cyan-800',
              text: 'text-cyan-600',
              tag: 'bg-cyan-100 text-cyan-700',
              borderClass: 'border-cyan-200'
            },
            yellow: {
              bg: 'bg-yellow-50',
              border: 'border-yellow-200',
              status: 'bg-yellow-100 text-yellow-800',
              text: 'text-yellow-600',
              tag: 'bg-yellow-100 text-yellow-700',
              borderClass: 'border-yellow-200'
            }
          }

          const cardClasses = computed(() => {
            const config = colorConfig[props.color] || colorConfig.blue
            return `${config.bg} ${config.border}`
          })

          const statusClasses = computed(() => {
            const config = colorConfig[props.color] || colorConfig.blue
            return config.status
          })

          const primaryTextClass = computed(() => {
            const config = colorConfig[props.color] || colorConfig.blue
            return config.text
          })

          const tagClasses = computed(() => {
            const config = colorConfig[props.color] || colorConfig.blue
            return config.tag
          })

          const borderClass = computed(() => {
            const config = colorConfig[props.color] || colorConfig.blue
            return config.borderClass
          })

          const scoreLabel = computed(() => {
            if (props.data.avgQualityScore !== undefined) return '质量评分'
            if (props.data.avgStarRating !== undefined) return '平均星数'
            if (props.data.avgImpactScore !== undefined) return '影响力评分'
            if (props.data.avgInnovationScore !== undefined) return '创新度评分'
            if (props.data.avgMarketImpact !== undefined) return '市场影响'
            if (props.data.avgInfluenceScore !== undefined) return '影响力评分'
            return '评分'
          })

          const scoreValue = computed(() => {
            if (props.data.avgQualityScore !== undefined) return `${props.data.avgQualityScore}/10`
            if (props.data.avgStarRating !== undefined) return props.data.avgStarRating
            if (props.data.avgImpactScore !== undefined) return `${props.data.avgImpactScore}/10`
            if (props.data.avgInnovationScore !== undefined) return `${props.data.avgInnovationScore}/10`
            if (props.data.avgMarketImpact !== undefined) return `${props.data.avgMarketImpact}/10`
            if (props.data.avgInfluenceScore !== undefined) return `${props.data.avgInfluenceScore}/10`
            return '0'
          })

          const tags = computed(() => {
            return props.data.topKeywords || 
                   props.data.topFields || 
                   props.data.topLanguages || 
                   props.data.topSources || 
                   props.data.topCompanies || 
                   props.data.topTechnologies || 
                   props.data.topCategories || 
                   []
          })

          const tagLabel = computed(() => {
            if (props.data.topKeywords) return '热门领域'
            if (props.data.topFields) return '技术领域'
            if (props.data.topLanguages) return '热门语言'
            if (props.data.topSources) return '热门来源'
            if (props.data.topCompanies) return '重点公司'
            if (props.data.topTechnologies) return '热门技术'
            if (props.data.topCategories) return '产品类别'
            return '标签'
          })
          </script>
          EOF

          # 创建图表组件
          cat > src/components/charts/TrendChart.vue << 'EOF'
          <template>
            <div class="w-full h-full flex items-center justify-center bg-gray-50 rounded-lg">
              <div v-if="loading" class="text-gray-500">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                <p class="mt-2 text-sm">加载中...</p>
              </div>
              <div v-else class="text-gray-500 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                <p class="mt-2 text-sm">趋势图表</p>
              </div>
            </div>
          </template>

          <script setup>
          const props = defineProps({
            data: {
              type: Object,
              default: () => ({})
            },
            loading: {
              type: Boolean,
              default: false
            },
            height: {
              type: String,
              default: '200px'
            }
          })
          </script>
          EOF

      - name: Create View Pages
        run: |
          echo "📄 Creating view pages..."
          
          # Overview页面
          cat > src/views/Overview.vue << 'EOF'
          <template>
            <div class="space-y-6">
              <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                  <h3 class="text-lg leading-6 font-medium text-gray-900">系统概览</h3>
                  <div class="mt-2 max-w-xl text-sm text-gray-500">
                    <p>技术情报决策引擎运行状态总览</p>
                  </div>
                </div>
                <div class="bg-gray-50 px-5 py-3">
                  <div class="text-sm">
                    <span class="font-medium text-gray-900">状态：</span>
                    <span class="text-green-600">运行正常</span>
                  </div>
                </div>
              </div>
            </div>
          </template>
          EOF
          
          # Collection页面
          # Collection页面 - 完整功能版本
          cat > src/views/Collection.vue << 'EOF'
          <template>
            <div class="space-y-6">
              <!-- 页面标题 -->
              <div class="bg-white shadow rounded-lg p-6">
                <div class="flex items-center justify-between">
                  <div>
                    <h1 class="text-2xl font-bold text-gray-900">数据采集监控</h1>
                    <p class="mt-1 text-sm text-gray-600">技术数据和业界标杆实时监控状态</p>
                  </div>
                  <div class="flex items-center space-x-4">
                    <button @click="refreshData" :disabled="loading" 
                            class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50">
                      <svg v-if="loading" class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      {{ loading ? '刷新中...' : '刷新数据' }}
                    </button>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" :class="systemStatus.class">
                      <span class="w-2 h-2 rounded-full mr-1.5" :class="systemStatus.dotClass"></span>
                      {{ systemStatus.text }}
                    </span>
                    <span class="text-sm text-gray-500">最后更新: {{ lastUpdate }}</span>
                  </div>
                </div>
              </div>

              <!-- 错误提示 -->
              <div v-if="error" class="bg-red-50 border border-red-200 rounded-md p-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-red-800">数据获取失败</h3>
                    <div class="mt-2 text-sm text-red-700">
                      <p>{{ error }}</p>
                      <p class="mt-1">正在使用缓存数据显示，请检查网络连接或稍后重试。</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- 技术数据监控区域 -->
              <div class="bg-white shadow rounded-lg p-6">
                <h2 class="text-lg font-semibold text-gray-900 mb-4">📊 技术数据监控区域</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  <!-- 学术论文卡片 -->
                  <DataCard :data="techData.academicPapers" color="blue" :loading="loading" />
                  <!-- 专利数据卡片 -->
                  <DataCard :data="techData.patentData" color="green" :loading="loading" />
                  <!-- 开源项目卡片 -->
                  <DataCard :data="techData.openSourceProjects" color="purple" :loading="loading" />
                  <!-- 技术新闻卡片 -->
                  <DataCard :data="techData.techNews" color="orange" :loading="loading" />
                </div>
              </div>

              <!-- 业界标杆监控区域 -->
              <div class="bg-white shadow rounded-lg p-6">
                <h2 class="text-lg font-semibold text-gray-900 mb-4">🏭 业界标杆监控区域</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  <!-- 标杆动态卡片 -->
                  <DataCard :data="benchmarkData.industryDynamics" color="indigo" :loading="loading" />
                  <!-- 技术创新卡片 -->
                  <DataCard :data="benchmarkData.techInnovation" color="pink" :loading="loading" />
                  <!-- 产品发布卡片 -->
                  <DataCard :data="benchmarkData.productLaunches" color="cyan" :loading="loading" />
                  <!-- 人才流动卡片 -->
                  <DataCard :data="benchmarkData.talentMovement" color="yellow" :loading="loading" />
                </div>
              </div>

              <!-- 趋势图表区域 -->
              <div class="bg-white shadow rounded-lg p-6">
                <h2 class="text-lg font-semibold text-gray-900 mb-4">📈 数据采集趋势</h2>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <!-- 技术数据趋势图 -->
                  <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-sm font-medium text-gray-900 mb-3">技术数据采集趋势</h3>
                    <TrendChart :data="techTrendData" :loading="loading" height="200px" />
                  </div>
                  <!-- 业界标杆趋势图 -->
                  <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-sm font-medium text-gray-900 mb-3">业界标杆监控趋势</h3>
                    <TrendChart :data="benchmarkTrendData" :loading="loading" height="200px" />
                  </div>
                </div>
              </div>
            </div>
          </template>

          <script setup>
          import { ref, onMounted, onUnmounted, computed } from 'vue'
          import { getCollectionData } from '@/utils/api'
          import DataCard from '@/components/common/DataCard.vue'
          import TrendChart from '@/components/charts/TrendChart.vue'

          // 响应式数据
          const loading = ref(false)
          const error = ref('')
          const lastUpdate = ref('')

          // 技术数据
          const techData = ref({
            academicPapers: {
              title: "学术论文",
              icon: "📚",
              status: "loading",
              todayCount: 0,
              totalCount: 0,
              successRate: 0,
              avgQualityScore: 0,
              topKeywords: [],
              trendData: [],
              lastUpdate: ''
            },
            patentData: {
              title: "专利数据",
              icon: "🔬",
              status: "loading",
              todayCount: 0,
              totalCount: 0,
              successRate: 0,
              avgQualityScore: 0,
              topFields: [],
              trendData: [],
              lastUpdate: ''
            },
            openSourceProjects: {
              title: "开源项目",
              icon: "💻",
              status: "loading",
              todayCount: 0,
              totalCount: 0,
              successRate: 0,
              avgStarRating: 0,
              topLanguages: [],
              trendData: [],
              lastUpdate: ''
            },
            techNews: {
              title: "技术新闻",
              icon: "📰",
              status: "loading",
              todayCount: 0,
              totalCount: 0,
              successRate: 0,
              avgImpactScore: 0,
              topSources: [],
              trendData: [],
              lastUpdate: ''
            }
          })

          // 业界标杆数据
          const benchmarkData = ref({
            industryDynamics: {
              title: "标杆动态",
              icon: "🏭",
              status: "loading",
              todayCount: 0,
              totalCount: 0,
              criticalEvents: 0,
              avgImpactScore: 0,
              topCompanies: [],
              trendData: [],
              lastUpdate: ''
            },
            techInnovation: {
              title: "技术创新",
              icon: "🚀",
              status: "loading",
              todayCount: 0,
              totalCount: 0,
              breakthroughCount: 0,
              avgInnovationScore: 0,
              topTechnologies: [],
              trendData: [],
              lastUpdate: ''
            },
            productLaunches: {
              title: "产品发布",
              icon: "📱",
              status: "loading",
              todayCount: 0,
              totalCount: 0,
              majorLaunches: 0,
              avgMarketImpact: 0,
              topCategories: [],
              trendData: [],
              lastUpdate: ''
            },
            talentMovement: {
              title: "人才流动",
              icon: "👥",
              status: "loading",
              todayCount: 0,
              totalCount: 0,
              executiveChanges: 0,
              avgInfluenceScore: 0,
              topCompanies: [],
              trendData: [],
              lastUpdate: ''
            }
          })

          // 计算属性
          const systemStatus = computed(() => {
            if (loading.value) {
              return {
                text: '数据更新中',
                class: 'bg-yellow-100 text-yellow-800',
                dotClass: 'bg-yellow-400'
              }
            }
            
            if (error.value) {
              return {
                text: '连接异常',
                class: 'bg-red-100 text-red-800',
                dotClass: 'bg-red-400'
              }
            }
            
            return {
              text: '系统运行中',
              class: 'bg-green-100 text-green-800',
              dotClass: 'bg-green-400'
            }
          })

          const techTrendData = computed(() => {
            return {
              labels: ['学术论文', '专利数据', '开源项目', '技术新闻'],
              datasets: [{
                label: '今日采集量',
                data: [
                  techData.value.academicPapers.todayCount,
                  techData.value.patentData.todayCount,
                  techData.value.openSourceProjects.todayCount,
                  techData.value.techNews.todayCount
                ],
                backgroundColor: ['#3B82F6', '#10B981', '#8B5CF6', '#F59E0B']
              }]
            }
          })

          const benchmarkTrendData = computed(() => {
            return {
              labels: ['标杆动态', '技术创新', '产品发布', '人才流动'],
              datasets: [{
                label: '今日更新量',
                data: [
                  benchmarkData.value.industryDynamics.todayCount,
                  benchmarkData.value.techInnovation.todayCount,
                  benchmarkData.value.productLaunches.todayCount,
                  benchmarkData.value.talentMovement.todayCount
                ],
                backgroundColor: ['#6366F1', '#EC4899', '#06B6D4', '#EAB308']
              }]
            }
          })

          // 数据获取函数
          const fetchData = async () => {
            loading.value = true
            error.value = ''
            
            try {
              console.log('开始获取Collection数据...')
              const response = await getCollectionData()
              
              if (response.success) {
                console.log('数据获取成功:', response.data)
                
                // 更新技术数据
                if (response.data.techData) {
                  Object.keys(response.data.techData).forEach(key => {
                    if (techData.value[key]) {
                      techData.value[key] = {
                        ...techData.value[key],
                        ...response.data.techData[key],
                        status: 'active'
                      }
                    }
                  })
                }
                
                // 更新业界标杆数据
                if (response.data.benchmarkData) {
                  Object.keys(response.data.benchmarkData).forEach(key => {
                    if (benchmarkData.value[key]) {
                      benchmarkData.value[key] = {
                        ...benchmarkData.value[key],
                        ...response.data.benchmarkData[key],
                        status: 'active'
                      }
                    }
                  })
                }
                
                lastUpdate.value = new Date(response.lastUpdated).toLocaleString('zh-CN')
                console.log('数据更新完成')
                
              } else {
                throw new Error(response.error || '数据获取失败')
              }
              
            } catch (err) {
              console.error('获取数据失败:', err)
              error.value = err.message || '网络连接失败，请检查网络设置'
              
              // 使用默认数据
              loadDefaultData()
              
            } finally {
              loading.value = false
            }
          }

          // 加载默认数据
          const loadDefaultData = () => {
            console.log('加载默认数据...')
            
            // 设置默认的技术数据
            techData.value = {
              academicPapers: {
                title: "学术论文",
                icon: "📚",
                status: "active",
                todayCount: 45,
                totalCount: 1250,
                successRate: 98.5,
                avgQualityScore: 8.2,
                topKeywords: ["AI", "5G", "量子计算"],
                trendData: [30, 35, 42, 38, 45, 52, 48],
                lastUpdate: new Date().toISOString()
              },
              patentData: {
                title: "专利数据",
                icon: "🔬",
                status: "active",
                todayCount: 78,
                totalCount: 3420,
                successRate: 96.8,
                avgQualityScore: 7.9,
                topFields: ["通信技术", "人工智能", "半导体"],
                trendData: [65, 70, 75, 72, 78, 82, 76],
                lastUpdate: new Date().toISOString()
              },
              openSourceProjects: {
                title: "开源项目",
                icon: "💻",
                status: "active",
                todayCount: 23,
                totalCount: 890,
                successRate: 94.2,
                avgStarRating: 1250,
                topLanguages: ["Python", "JavaScript", "Go"],
                trendData: [18, 20, 25, 21, 23, 28, 24],
                lastUpdate: new Date().toISOString()
              },
              techNews: {
                title: "技术新闻",
                icon: "📰",
                status: "active",
                todayCount: 156,
                totalCount: 5670,
                successRate: 99.1,
                avgImpactScore: 7.5,
                topSources: ["TechCrunch", "MIT Tech Review", "IEEE"],
                trendData: [120, 135, 148, 142, 156, 162, 158],
                lastUpdate: new Date().toISOString()
              }
            }
            
            // 设置默认的业界标杆数据
            benchmarkData.value = {
              industryDynamics: {
                title: "标杆动态",
                icon: "🏭",
                status: "active",
                todayCount: 32,
                totalCount: 1180,
                criticalEvents: 5,
                avgImpactScore: 8.1,
                topCompanies: ["Google", "Microsoft", "Apple"],
                trendData: [25, 28, 35, 30, 32, 38, 34],
                lastUpdate: new Date().toISOString()
              },
              techInnovation: {
                title: "技术创新",
                icon: "🚀",
                status: "active",
                todayCount: 18,
                totalCount: 650,
                breakthroughCount: 3,
                avgInnovationScore: 8.7,
                topTechnologies: ["量子计算", "生成式AI", "6G通信"],
                trendData: [12, 15, 20, 16, 18, 22, 19],
                lastUpdate: new Date().toISOString()
              },
              productLaunches: {
                title: "产品发布",
                icon: "📱",
                status: "active",
                todayCount: 8,
                totalCount: 340,
                majorLaunches: 2,
                avgMarketImpact: 7.8,
                topCategories: ["AI芯片", "云服务", "移动设备"],
                trendData: [5, 6, 9, 7, 8, 10, 9],
                lastUpdate: new Date().toISOString()
              },
              talentMovement: {
                title: "人才流动",
                icon: "👥",
                status: "active",
                todayCount: 12,
                totalCount: 450,
                executiveChanges: 3,
                avgInfluenceScore: 8.3,
                topCompanies: ["OpenAI", "Meta", "Tesla"],
                trendData: [8, 10, 14, 11, 12, 15, 13],
                lastUpdate: new Date().toISOString()
              }
            }
            
            lastUpdate.value = new Date().toLocaleString('zh-CN')
          }

          // 手动刷新数据
          const refreshData = () => {
            fetchData()
          }

          let refreshInterval = null

          // 组件挂载时初始化
          onMounted(() => {
            console.log('Collection页面挂载，开始获取数据...')
            fetchData()
            
            // 设置定时刷新（每5分钟）
            refreshInterval = setInterval(fetchData, 300000)
          })

          // 组件卸载时清除定时器
          onUnmounted(() => {
            if (refreshInterval) {
              clearInterval(refreshInterval)
            }
          })
          </script>
          EOF
          
          # 其他页面
          cat > src/views/Analysis.vue << 'EOF'
          <template>
            <div class="space-y-6">
              <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                  <h3 class="text-lg leading-6 font-medium text-gray-900">情报分析</h3>
                  <p class="mt-1 text-sm text-gray-600">技术情报深度分析结果</p>
                </div>
              </div>
            </div>
          </template>
          EOF
          
          cat > src/views/Action.vue << 'EOF'
          <template>
            <div class="space-y-6">
              <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                  <h3 class="text-lg leading-6 font-medium text-gray-900">行动建议</h3>
                  <p class="mt-1 text-sm text-gray-600">基于情报分析的决策建议</p>
                </div>
              </div>
            </div>
          </template>
          EOF
          
          cat > src/views/Reports.vue << 'EOF'
          <template>
            <div class="space-y-6">
              <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                  <h3 class="text-lg leading-6 font-medium text-gray-900">报告中心</h3>
                  <p class="mt-1 text-sm text-gray-600">生成和查看各类分析报告</p>
                </div>
              </div>
            </div>
          </template>
          EOF

      - name: Create CSS and Assets
        run: |
          echo "🎨 Creating styles and assets..."
          
          cat > src/assets/styles/main.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;

          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
          }
          EOF
          
          # 创建favicon
          echo "Creating favicon..."
          # 这里可以添加favicon文件，暂时跳过

      - name: Create Sample Data
        run: |
          echo "📊 Creating sample data..."
          
          cat > data/collection/tech-data-status.json << 'EOF'
          {
            "lastUpdated": "2025-06-23T10:00:00Z",
            "techData": {
              "academicPapers": {
                "title": "学术论文",
                "icon": "📚",
                "status": "active",
                "todayCount": 45,
                "totalCount": 1250,
                "successRate": 98.5,
                "trendData": [30, 35, 42, 38, 45]
              },
              "patentData": {
                "title": "专利数据", 
                "icon": "🔬",
                "status": "active",
                "todayCount": 78,
                "totalCount": 3420,
                "successRate": 96.8,
                "trendData": [65, 70, 75, 72, 78]
              }
            }
          }
          EOF

      - name: Commit Project Files to Repository
        run: |
          echo "💾 提交项目文件到仓库..."
          
          # 配置Git用户
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 添加所有文件
          git add .
          
          # 检查是否有变更
          if [ -n "$(git status --porcelain)" ]; then
            echo "📝 提交新文件..."
            git commit -m "🚀 Auto-generate project structure

            - Complete Vue.js application
            - All components and configurations  
            - Ready for development"
            
            git push
            echo "✅ 提交成功"
          else
            echo "ℹ️ 没有变更需要提交"
          fi

      - name: Replace Environment Variables
        run: |
          echo "🔧 替换环境变量..."
          
          # 显示当前文件内容（调试用）
          echo "替换前的api.js内容："
          grep -n "API_BASE_URL" src/utils/api.js
          
          # 检查环境变量
          if [ -z "$GOOGLE_APPS_SCRIPT_URL" ]; then
            echo "❌ 错误: GOOGLE_APPS_SCRIPT_URL 环境变量未设置"
            echo "当前环境变量："
            env | grep -i google || echo "没有找到Google相关环境变量"
            exit 1
          fi
          
          echo "✅ Google Apps Script URL已设置: ${GOOGLE_APPS_SCRIPT_URL:0:50}..."
          
          # 执行替换
          sed -i "s|GOOGLE_APPS_SCRIPT_URL_PLACEHOLDER|$GOOGLE_APPS_SCRIPT_URL|g" src/utils/api.js
          
          # 验证替换结果
          echo "替换后的api.js内容："
          grep -n "API_BASE_URL" src/utils/api.js
          
          if grep -q "PLACEHOLDER" src/utils/api.js; then
            echo "❌ 错误: 环境变量替换失败"
            cat src/utils/api.js | head -30
            exit 1
          fi
          
          echo "✅ 环境变量替换完成"
        env:
          GOOGLE_APPS_SCRIPT_URL: ${{ secrets.GOOGLE_APPS_SCRIPT_URL }}

      

      - name: Install Dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm install

      - name: Build Application
        run: |
          echo "🔨 Building application..."
          
          # 检查构建前的文件结构
          echo "📁 构建前检查:"
          ls -la
          echo "📁 src目录:"
          ls -la src/
          echo "📁 src/components:"
          ls -la src/components/ || echo "components目录不存在"
          
          # 检查package.json
          echo "📄 Package.json scripts:"
          cat package.json | grep -A 10 '"scripts"'
          
          # 清理可能的缓存
          rm -rf node_modules/.vite
          rm -rf dist
          
          # 执行构建
          echo "🔧 开始Vite构建..."
          npm run build -- --mode production --outDir dist
          
          # 检查构建结果
          echo "📁 构建后检查:"
          ls -la dist/
          echo "📄 构建后的index.html:"
          cat dist/index.html
          
          # 验证关键文件存在
          if [ ! -f "dist/index.html" ]; then
            echo "❌ 错误: dist/index.html 不存在"
            exit 1
          fi
          
          # 检查是否有JS和CSS文件
          echo "📁 构建后的assets:"
          ls -la dist/assets/ || echo "No assets directory"
          
          echo "✅ 构建完成"
        env:
          NODE_ENV: production

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          enablement: true

      - name: Verify Build Output
        run: |
          echo "🔍 Verifying build output..."
          if [ ! -d "dist" ]; then
            echo "❌ dist directory not found!"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html not found in dist!"
            exit 1
          fi
          echo "✅ Build verification passed"
          echo "📊 Dist directory size:"
          du -sh dist/
          echo "📄 Files in dist:"
          find dist/ -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -10

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment Complete
        run: |
          echo "🎉 部署完成！"
          echo "🌐 访问地址: ${{ steps.deployment.outputs.page_url }}"
